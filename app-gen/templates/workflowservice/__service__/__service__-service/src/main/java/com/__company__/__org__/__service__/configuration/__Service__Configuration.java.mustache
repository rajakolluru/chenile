package com.{{company}}.{{org}}.{{service}}.configuration;

import org.chenile.stm.STM;
import org.chenile.stm.action.STMTransitionAction;
import org.chenile.stm.impl.BeanFactoryAdapter;
import org.chenile.stm.impl.STMActionsInfoProvider;
import org.chenile.stm.impl.STMFlowStoreImpl;
import org.chenile.stm.impl.STMImpl;
import org.chenile.stm.impl.XmlFlowReader;
import org.chenile.stm.spring.SpringBeanFactoryAdapter;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import {{chenilePackage}}.entity.service.EntityStore;
import {{chenilePackage}}.service.impl.StateEntityServiceImpl;
import {{chenilePackage}}.service.stmcmds.BaseTransitionAction;
import {{chenilePackage}}.service.stmcmds.GenericEntryAction;
import {{chenilePackage}}.service.stmcmds.GenericExitAction;
import {{chenilePackage}}.service.stmcmds.StmBodyTypeSelector;
import com.{{company}}.{{org}}.{{service}}.model.{{Service}};
import com.{{company}}.{{org}}.{{service}}.service.cmds.Assign{{Service}}Action;
import com.{{company}}.{{org}}.{{service}}.service.cmds.Close{{Service}}Action;
import com.{{company}}.{{org}}.{{service}}.service.cmds.Resolve{{Service}}Action;
import com.{{company}}.{{org}}.{{service}}.service.healthcheck.{{Service}}HealthChecker;
import com.{{company}}.{{org}}.{{service}}.service.store.{{Service}}EntityStore;

/**
 This is where you will instantiate all the required classes in Spring

*/
@Configuration
public class {{Service}}Configuration implements InitializingBean{
	private static final String FLOW_DEFINITION_FILE = "com/{{company}}/{{org}}/{{service}}/states.xml";
	@Autowired @Qualifier("{{service}}FlowStore") STMFlowStoreImpl flowStore;
	
	@Bean BeanFactoryAdapter {{service}}BeanFactoryAdapter() {
		return new SpringBeanFactoryAdapter();
	}
	
	@Bean STMFlowStoreImpl {{service}}FlowStore(@Qualifier("{{service}}BeanFactoryAdapter") BeanFactoryAdapter {{service}}BeanFactoryAdapter) throws Exception{
		STMFlowStoreImpl stmFlowStore = new STMFlowStoreImpl();
		stmFlowStore.setBeanFactory({{service}}BeanFactoryAdapter);
		return stmFlowStore;
	}
	
	@Bean @Autowired STM<{{Service}}> {{service}}EntityStm(@Qualifier("{{service}}FlowStore") STMFlowStoreImpl stmFlowStore) throws Exception{
		STMImpl<{{Service}}> stm = new STMImpl<>();		
		stm.setStmFlowStore(stmFlowStore);
		return stm;
	}
	
	@Bean @Autowired STMActionsInfoProvider {{service}}ActionsInfoProvider(@Qualifier("{{service}}FlowStore") STMFlowStoreImpl stmFlowStore) {
		return new STMActionsInfoProvider(stmFlowStore);
	}
	
	@Bean @Profile("!unittest") EntityStore<{{Service}}> {{service}}EntityStore() {
		return new {{Service}}EntityStore();
	}
	
	@Bean @Autowired StateEntityServiceImpl<{{Service}}> _{{service}}StateEntityService_(
			@Qualifier("{{service}}EntityStm") STM<{{Service}}> stm,
			@Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider,
			@Qualifier("{{service}}EntityStore") EntityStore<{{Service}}> entityStore){
		return new StateEntityServiceImpl<>(stm, {{service}}InfoProvider, entityStore);
	}
	
	// Now we start constructing the STM Components 
	
	@Bean @Autowired GenericEntryAction<{{Service}}> {{service}}EntryAction(@Qualifier("{{service}}EntityStore") EntityStore<{{Service}}> entityStore,
			@Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider){
		return new GenericEntryAction<{{Service}}>(entityStore,{{service}}InfoProvider);
	}
	
	@Bean GenericExitAction<{{Service}}> {{service}}ExitAction(){
		return new GenericExitAction<{{Service}}>();
	}
	
	@Bean @Autowired StmBodyTypeSelector {{service}}BodyTypeSelector(@Qualifier("{{service}}ActionsInfoProvider") STMActionsInfoProvider {{service}}InfoProvider) {
		return new StmBodyTypeSelector({{service}}InfoProvider);
	}
	
	@Bean @Autowired STMTransitionAction<{{Service}}> {{service}}BaseTransitionAction(){
		return new BaseTransitionAction<>();
	}
	
	@Bean Assign{{Service}}Action assign{{Service}}() {
		return new Assign{{Service}}Action();
	}
	
	@Bean Resolve{{Service}}Action resolve{{Service}}() {
		return new Resolve{{Service}}Action();
	}
	
	@Bean Close{{Service}}Action close{{Service}}() {
		return new Close{{Service}}Action();
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		// Read the XML now after creating all the dependent beans. Else there
		// will be a circular dependency
		
		XmlFlowReader flowReader = new XmlFlowReader(flowStore);
		flowReader.setFilename(FLOW_DEFINITION_FILE);
	}
	

	@Bean {{Service}}HealthChecker {{service}}HealthChecker(){
    	return new {{Service}}HealthChecker();
    }
}

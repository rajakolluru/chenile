package {{com}}.{{company}}.{{org}}.{{interceptorName}}.interceptor;

import org.chenile.core.context.ChenileExchange;
import org.chenile.core.interceptors.BaseChenileInterceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import {{com}}.{{company}}.{{org}}.{{interceptorName}}.{{InterceptorName}};

/**
 * 
 * A custom interceptor. 
 * This uses a customized annotation that contains all the configurtion required
 *
 */
public class {{InterceptorName}}Interceptor extends BaseChenileInterceptor {
    private static final Logger logger = LoggerFactory.getLogger({{InterceptorName}}.class);
	@Override
	protected void doPreProcessing(ChenileExchange exchange) {
        {{InterceptorName}} config = getExtensionByAnnotation({{InterceptorName}}.class, exchange);
		logger.debug("At logger (pre-processor): value is " + config.value());
		exchange.setHeader("{{interceptorName}}-preprocessheader", config.value());
		// as a test we will obtain the value of the 
		// do something with the config 
		// use exchange.getBody() to access the payload if this interceptor is intended to be a payload processor
		// else use exchange.getHeader("name") to access specific headers
        /*
        Some example code for throwing an error.
        throw new ServerException(ErrorCodes.SOME_ERROR,new Object[] {});
        */
	}

	@Override
	protected void doPostProcessing(ChenileExchange exchange) {
        {{InterceptorName}} config = getExtensionByAnnotation({{InterceptorName}}.class, exchange);
		logger.debug("At logger (post-processor): value is " + config.value());
		exchange.setHeader("{{interceptorName}}-postprocessheader", config.value());
		// do something with the config 
		// use exchange.getResponse() to access the response
		// use exchange.getException() to access the response
	}	

	// Use this method to bypass the interceptor if there exists no configuration
	@Override
	protected boolean bypassInterception(ChenileExchange exchange) {
		{{InterceptorName}} config = getExtensionByAnnotation({{InterceptorName}}.class, exchange);
		if(config == null)return true;
		return false;
	}
}
